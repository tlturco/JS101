//Exercise 1
//double char

function repeater(str) {
  let newString = '';
  for (let i = 0; i < str.length; i++) {
    newString += str[i] + str[i];
  }
  return newString;
}

console.log(repeater('Hello'));        // "HHeelllloo"
console.log(repeater('Good job!'));    // "GGoooodd  jjoobb!!"
console.log(repeater(''));             // """

/*Launch School Solution
function repeater(string) {
  return string.split("").map(char => char + char).join("");
}
*/

//Exercise 2
function doubleConsonants(string) {
  let regex = /[aeiou]|[^a-z]/gi;
  let array = string.split("").map(char => {
    if (char.match(regex)) {
      return char;
    } else {
      return char + char;
    }
  });
  return array.join("");
}

console.log(doubleConsonants('String'));
console.log(doubleConsonants('Hello-World!'));
console.log(doubleConsonants('July 4th'));
console.log(doubleConsonants(''));

//Exercise 3
function reverseNumber(num) {
  return Number(num.toString().split("").reverse().join(""));
}

reverseNumber(12345);    // 54321
reverseNumber(12213);    // 31221
reverseNumber(456);      // 654
reverseNumber(12000);    // 21 -- Note that leading zeros in the result get dropped!
reverseNumber(1);


//Exercise 4
function centerOf(str) {
  let middle = str.length / 2;
  if (Number.isInteger(middle)) {
    return str[middle - 1] + str[middle];
  } else {
    return str[Math.floor(middle)];
  }
}

//Exercise 5
function negative(num) {
  return num > 0 ? (num *= -1) : num;
}

//Exercise 6
function sequence(num) {
  let result = [];
  for (let i = 1; i <= num; i++) {
    result.push(i);
  }
  return result;
}

//Exercise 7
function swapName(name) {
  return name.split(" ").reverse().join(", ");
}
swapName('Joe Roberts');


//Exercise 8
function sequenceCount(count, startingNum) {
  let result = [];
  for (let i = 1; i <= count; i++) {
    result.push(startingNum * i);
  }
  return result;
}

//Exercise 9
function reverseSentence(str) {
  return str.split(" ").reverse().join(" ");
}

//Exercise 10
function reverseWords(str) {
  let words = str.split(" ");
  let result = [];
  words.forEach(word => {
    if (word.length >= 5) {
      result.push(word.split('').reverse().join(''));
    } else {
      result.push(word);
    }
  });
  return result.join(" ");
}

//Exercise 11
//Reversed Arrays (without using the .reverse() method)
//Mutate in place 

function reverse(arr) {
  let leftIndex = 0;
  let rightIndex = arr.length - 1;

  while (leftIndex < arr.length / 2) {
    [arr[leftIndex], arr[rightIndex]] = 
    [arr[rightIndex], arr[leftIndex]];

    leftIndex += 1;
    rightIndex -= 1;
  }

  return arr;
}

//not mutating the array
/*
function reverse(arr) {
let result = [];
  for (let i = arr.length - 1; i >= 0; i -= 1) {
     result.push(arr[i]);
  }
 arr = result;
 return arr;
}
*/


//Exercise 12
//Matching Parentheses?
function isBalanced(string) {
  let parenth = string.split("").filter(char => ['(', ')'].includes(char));
  let leftParenth = string.split("").filter(char => ['('].includes(char));
  let rightParenth = string.split("").filter(char => [')'].includes(char));

  if (parenth.length !== 0) {
    if (leftParenth.length !== rightParenth.length) {
      return false;
    } else if (parenth[0] !== '(') {
      return false;
    } else if (parenth[parenth.length - 1] !== ')') {
      return false;
    } else return true;
  } else return true;

}

console.log(isBalanced("What (is) this?") === true);
console.log(isBalanced("What is) this?") === false);
console.log(isBalanced("What (is this?") === false);
console.log(isBalanced("((What) (is this))?") === true);
console.log(isBalanced("((What)) (is this))?") === false);
console.log(isBalanced("Hey!") === true);
console.log(isBalanced(")Hey!(") === false);
console.log(isBalanced("What ((is))) up(") === false);


//LS Solution
/*
function isBalanced(string) {
  let parens = 0;
  for (let idx = 0; idx < string.length; idx++) {
    if (string[idx] === '(') {
      parens += 1;
    } else if (string[idx] === ')') {
      parens -= 1;
    }
    if (parens < 0) return false;
  }
  return parens === 0;
}
*/

function isBalanced2(string, leftChar, rightChar) {
  let parens = 0;
  for (let idx = 0; idx < string.length; idx++) {
    if (string[idx] === leftChar) {
      parens += 1;
    } else if (string[idx] === rightChar) {
      parens -= 1;
    }
    if (parens < 0) return false;
  }
  if (leftChar === rightChar) {
    return parens % 2 === 0;
  } else return parens === 0;
}


console.log(isBalanced2('()asdf', '(', ')'));

console.log(isBalanced2('"asdf', '"', '"'));
console.log(isBalanced2('"asdf"', '"', '"'));
